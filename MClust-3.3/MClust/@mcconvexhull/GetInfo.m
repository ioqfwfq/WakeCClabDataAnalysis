function [msg, ClusterLimits] = GetInfo(MCC)% msg = GetInfo(MCC)%% INPUTS%    MCC -- MClust cluster object% % OUTPUTS%    msg -- cell array message%% ADR 1999%% Status: PROMOTED (Release version) % See documentation for copyright (owned by original authors) and warranties (none!).% This code released as part of MClust 3.0.% Version control M3.0.msg = {};iM = 1;ClusterLimits = [];global MClust_FeatureData MClust_FeatureNamesf = FindInCluster(MCC, MClust_FeatureData);msg{iM} = [num2str(length(f)) ' points']; iM = iM+1;msg{iM} = ''; iM = iM+1;msg{iM} = 'Limits:'; iM = iM+1;if length(MCC.xdims)	for iL = 1:length(MCC.xdims)		msg{iM} = ['   ' MClust_FeatureNames{MCC.xdims(iL)} ' x ' MClust_FeatureNames{MCC.ydims(iL)}]; iM = iM+1;        ClusterLimits = [ClusterLimits; [MCC.xdims(iL) MCC.ydims(iL)]];   endelse   msg{iM} = 'none';end%if	% 
% msg = {};% iM = 1;% % global MClust_FeatureData MClust_FeatureNames% f = FindInCluster(MCC, MClust_FeatureData);% msg{iM} = [num2str(length(f)) ' points']; iM = iM+1;% msg{iM} = ''; iM = iM+1;% msg{iM} = 'Limits'; iM = iM+1;% for iL = 1:length(MCC.xdims)%    msg{iM} = ['   ' MClust_FeatureNames{MCC.xdims(iL)} ' x ' MClust_FeatureNames{MCC.ydims(iL)}]; iM = iM+1;% end